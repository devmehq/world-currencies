name: Release to All Package Managers

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (without v prefix)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        if: github.event_name == 'workflow_dispatch'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  npm-publish:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Update package version
        run: |
          npm version ${{ needs.create-release.outputs.version }} --no-git-tag-version
      
      - name: Install and Build
        run: |
          npm ci
          npm run build
      
      - name: Publish to NPM
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  pypi-publish:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Update version
        run: |
          sed -i "s/version = \".*\"/version = \"${{ needs.create-release.outputs.version }}\"/" pyproject.toml
          sed -i "s/version=\".*\"/version=\"${{ needs.create-release.outputs.version }}\"/" setup.py
      
      - name: Build package
        run: |
          python -m pip install --upgrade pip build
          python -m build
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  rubygems-publish:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
      
      - name: Update version
        run: |
          sed -i "s/spec.version.*=.*/spec.version       = '${{ needs.create-release.outputs.version }}'/" devmehq-world-currencies.gemspec
      
      - name: Build and Publish
        env:
          GEM_HOST_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
        run: |
          gem build devmehq-world-currencies.gemspec
          gem push devmehq-world-currencies-*.gem

  packagist-notify:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify Packagist
        run: |
          curl -XPOST -H "Content-Type: application/json" \
            -d '{"repository":{"url":"https://github.com/${{ github.repository }}"}}' \
            "https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_TOKEN }}"